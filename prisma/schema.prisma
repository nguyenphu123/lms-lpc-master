datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Role {
  id             String           @id @default(uuid())
  title          String           @unique
  status         String           @default("active")
  rolePermission RolePermission[]
}

model Permission {
  id             String           @id @default(uuid())
  title          String           @unique
  status         String           @default("active")
  userPermission userPermission[]
  RolePermission RolePermission[]
}

model RolePermission {
  id           String      @id @default(uuid())
  role         Role?       @relation(fields: [roleId], references: [id])
  roleId       String?
  permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId String?

  @@index([roleId])
  @@index([permissionId])
}

model userPermission {
  id           String     @id @default(uuid())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([permissionId])
  @@index([userId])
}

model Department {
  id                  String                @id @default(uuid())
  title               String                @unique
  User                User[]
  status              String                @default("active")
  ProgramOnDepartment ProgramOnDepartment[]
  CourseOnDepartment  CourseOnDepartment[]
  Module              Module[]
}

model CourseOnDepartment {
  id           String      @id @default(uuid())
  Department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  course       Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String?

  @@index([departmentId])
  @@index([courseId])
}

model ProgramOnDepartment {
  id           String      @id @default(uuid())
  Department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?
  program      Program     @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId    String

  @@index([departmentId])
  @@index([programId])
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  Department     Department? @relation(fields: [departmentId], references: [id])
  departmentId   String?
  username       String
  // role                     String
  starUpdateDate DateTime?   @default(now())
  star           Int?
  imageUrl       String?
  status         String      @default("active")

  Course             Course[]             @relation("userId")
  updatedCourse      Course[]             @relation("updatedBy")
  instructedCourse   Course[]             @relation("courseInstructedBy")
  ClassSessionRecord ClassSessionRecord[]

  BookMark       BookMark[]
  Program        Program[]        @relation("userId")
  updatedProgram Program[]        @relation("updatedBy")
  userPermission userPermission[]
  examRecord     examRecord[]
  userExamReport userExamReport[]

  @@index([departmentId])
}

model Program {
  id    String @id @default(uuid())
  title String @db.Text

  description String?   @db.Text
  imageUrl    String?   @db.Text
  user        User      @relation("userId", fields: [userId], references: [id])
  userId      String
  updatedUser User?     @relation("updatedBy", fields: [updatedBy], references: [id])
  updatedBy   String    @default("")
  startDate   DateTime  @default(now())
  endDate     DateTime?
  isPublished Boolean   @default(false)

  courseWithProgram   courseWithProgram[]
  ProgramOnDepartment ProgramOnDepartment[]

  @@index([userId])
  @@index([updatedBy])
}

model Course {
  id                 String               @id @default(uuid())
  title              String               @db.Text
  description        String?              @db.Text
  imageUrl           String?              @db.Text
  user               User                 @relation("userId", fields: [userId], references: [id])
  userId             String
  updatedUser        User?                @relation("updatedBy", fields: [updatedBy], references: [id])
  updatedBy          String               @default("")
  courseInstructor   User?                @relation("courseInstructedBy", fields: [courseInstructedBy], references: [id])
  courseInstructedBy String               @default("")
  startDate          DateTime             @default(now())
  endDate            DateTime?
  updateDate         DateTime?
  intro              String?
  isPublished        Boolean              @default(false)
  credit             Int?
  courseFor          String?
  ClassSessionRecord ClassSessionRecord[]
  ModuleInCourse     ModuleInCourse[]
  courseWithProgram  courseWithProgram[]
  BookMark           BookMark[]
  CourseOnDepartment CourseOnDepartment[]

  ExamInCourse ExamInCourse[]

  @@index([userId])
  @@index([updatedBy])
  @@index([courseInstructedBy])
}

model ClassSessionRecord {
  id        String    @id @default(uuid())
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  progress  String?   @db.Text
  status    String?
  startDate DateTime?
  endDate   DateTime?
  score     Int?

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}

model BookMark {
  id       String @id @default(uuid())
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}

model ModuleInCourse {
  id       String @id @default(uuid())
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String
  position Int

  @@unique([courseId, moduleId])
  @@index([courseId])
  @@index([moduleId])
}

model Module {
  id             String           @id @default(uuid())
  title          String           @db.Text
  type           String
  isPublished    Boolean
  description    String?
  content        String?
  position       Int
  contentType    String?
  videoUrl       String?
  fileUrl        String?
  deparment      Department       @relation(fields: [departmentId], references: [id])
  departmentId   String
  Resource       Resource[]
  ModuleInCourse ModuleInCourse[]

  @@index([departmentId])
}

model Resource {
  id             String @id @default(uuid())
  module         Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId       String
  attachment     String
  attachmentType String

  @@index([moduleId])
}

model ExamInCourse {
  id             String           @id @default(uuid())
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  exam           Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId         String
  maxAttempt     Int              @default(1)
  userExamReport userExamReport[]
  examRecord     examRecord[]

  @@unique([courseId, examId])
  @@index([courseId])
  @@index([examId])
}

model Exam {
  id           String         @id @default(uuid())
  title        String
  category     Category[]
  timeLimit    Float?
  scoreLimit   Int?
  ExamInCourse ExamInCourse[]
}

model Category {
  id              String @id @default(uuid())
  title           String
  Exam            Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId          String
  numOfAppearance Int

  question Question[]

  @@index([examId])
}

model Question {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  question   String?  @db.Text
  score      Int
  compulsory Boolean
  answer     Answer[]
  type       String?

  @@index([categoryId])
}

model Answer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  isCorrect  Boolean

  @@index([questionId])
}

model courseWithProgram {
  id        String   @id @default(uuid())
  program   Program? @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String?
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  @@unique([programId, courseId])
  @@index([programId])
  @@index([courseId])
}

model examRecord {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  ExamInCourse   ExamInCourse @relation(fields: [examInCourseId], references: [id], onDelete: Cascade)
  examInCourseId String
  progress       String       @db.Text
  status         String
  startDate      DateTime
  endDate        DateTime?
  score          Int?
  attempt        Int?
  retakeTime     Int?         @default(0)
  examRecord     Json?
  date           DateTime

  @@unique([examInCourseId, userId])
  @@index([examInCourseId])
  @@index([userId])
}

model userExamReport {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  ExamInCourse   ExamInCourse @relation(fields: [examInCourseId], references: [id], onDelete: Cascade)
  examInCourseId String
  isInExam       Boolean
  examRecord     Json?
  note           String
  date           DateTime

  @@index([userId])
  @@index([examInCourseId])
}
